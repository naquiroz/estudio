#!/bin/sh

usage() {
    echo "Seeds the database using fixture files and creates custom superuser"
    echo "\n"
    echo "Usage: seeddata.sh [--username username] [--password password] args"
    echo "\n"
    echo "  --username username  username for the superuser default as notuser"
    echo "  --password password  password for the superuser default as notpassword"
    echo "  args                 if present they are set up as flags for docker-compose command"
    echo "\n"
}

if [[ "$1" =~ ^(-h)|(--help)$ ]]; then
usage
exit;
fi;

# Let’s cd into the scripts folder to get its absolute path.
# And then, let’s get his parent--that’s our base directory!
SCRIPTS=$(cd $(dirname $0) && pwd)
BASEDIR=$(dirname $SCRIPTS)

# Parse input flags and username/password
FLAGS=""
while [ $# -gt 0 ]
do
    key="$1"
    case $key in
        --username)
            SEED_USERNAME="$2"
            shift # past argument
            shift # past value
        ;;
        --password)
            SEED_PASSWORD="$2"
            shift # past argument
            shift # past value
        ;;
        *)
            FLAGS="$FLAGS $1 $2"
            shift # past argument
            shift # past value
        ;;
    esac
done

# We drop volumes, apply migrations, and load a bunch of fixtures.
{
    docker-compose $FLAGS down --volumes &&
    docker-compose $FLAGS run web python manage.py migrate &&
    docker-compose $FLAGS run web python manage.py addsuperuser --no-input --username ${SEED_USERNAME:-notuser} --email user@estudio.com --password ${SEED_PASSWORD:-notpassword} --first-name estudio --last-name user --pk f43a1dc5-7eff-479a-bd37-d10aef9b17a9 &&
    docker-compose $FLAGS down  # If everything works properly, remove the containers generated by this script.
} || docker-compose $FLAGS down # But, if something goes wrong, remove the containers generated by this script.
